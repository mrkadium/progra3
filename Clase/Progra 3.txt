****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 25/07/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

Operaciones elementales: aquellas que la computadora realiza en el tiempo acotado por una constante, como aquellas
operaciones aritmèticas básicas, asignacinoes predefinidas, o sea cualquier operació dada por el microprocesador.

Programa con complejidad constante: aquellos que no tienen ciclos.
Omicrón: calcula la eficiencia.

int x[4];
x[0] = 1;
x[1] = 2;
x[2] = 3;
x[3] = 4;

int *p = x;

cout << "Direccion x" << &x << endl;
cout << Puntero p" << p << endl; ///son iguales

EJEMPLO U BINARIO
int x = 204;
int y = 148;

///operadores binarios: & (conjunción binaria), | (disyunción binaria), ^ (diferencia simétrica)
///int c = x&y;
///int c = x|y;
///int c = x^y;
int c = x|y;

cout << "c : " << c << endl; ///muestra 220



****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 08/08/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

EJERCICIOS:
Sea el conjunto:
A = {1,4,7}
B = {0,1,3,7}

Desarrollar:
*****1. C = A | B = {0,1,3,4,7}
A = 10010010 = 146
B = 10001011 = 139

C = 10011011 = 155

*****2. C = A & B = {1,7}
A = 10010010 = 146
B = 10001011 = 139

C = 10000010 = 130

*****3. C = A - B = {4}
A & Bnegado (o sea 0 es 1 y viceversa)
A = 10010010 = 146
B = 10001011 = 139

A       = 10010010
Bnegado = 01110100

C = A & Bnegado = 00010000 = 16

*****4. C = A ^ B = {0,3,4}
(A | B) - (A & B)

A | B         = 10011011
(A & B)negado = 01111101
C             = 00011001 = 25



****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 11/08/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

Arreglo: estructura de datos estática, ineficiente al tener que fijar el espacio de memoria por adelantado.
Nodos: tienen dos campos, uno para almacenar el valor y otro para el enlace. El último enlace de una lista apunta a NULL.

NODO
-Valor : int
-Siguiente: NODO
+NODO ()
+NODO (int, NODO)

LISTA
-Primero : NODO
-Últmo : NODO
+LISTA()

Lista simplemente enlazada: sólo tiene un nodo, sólo se puede apuntar hacia el siguiente.
Lista doblemente enlazada: tiene enlace al inicio y al final del nodo; puede viajar al siguiente o al anterior.
Lista circular simple: el enlace del último nodo apunta al primer nodo.
Lista circular doble: el primer nodo apunta al último, y el último al primero.

primero = new elemento(primero, 5);

new : para invocar una variable dinámica.

-> : Se usa para acceder al miembro de una clase dinámica.



****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 18/08/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

Programa Listas

****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 22/08/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

Programa Listas - continuación

****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 25/08/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

Programa Listas - continuación

****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 10/11/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

Clasificación de los árboles
	-Generales
	-Binarios
	-De expresión
	-Equilibrados
	-Binarios de búsqueda
	-B+

Factor de equilibrio:
B = Hd - Hi

B: factor de equilibrio
Hd: altura derecha
Hi: altura izquierda

Sobrecarga de operadores

Qt

token: componente del léxico

Compiladores

JEK Java

****************************************************************************************************************************************************************************************************************
*********************************************************************************************** CLASE 14/11/2017 ***********************************************************************************************
****************************************************************************************************************************************************************************************************************

struct - c
	no tiene el mismo alcance, no tiene programación orientada a objetos
	modelado con struct(estructuras)
class - c++
	tiene todo, excepto que para programar hardware se utiliza c, ya que no soporta c++
	modelado con class(clases)

c.conclase.net
	descargar plantilla de árboles y adaptarla a nuestra codificación y otras necesarias

el cpp se compila, el .h(cabecera) no
descargar las presentaciones